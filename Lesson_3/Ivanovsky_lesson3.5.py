# Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии
# Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет
# добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму
# этих чисел к полученной ранее сумме и после этого завершить программу

# Задание несложное, и в принципе функция тут не нужна
# Чтобы было полезно, давайте я продемонстрирую своё понимание global
# Выглядит так, что использование global - это плохой стиль, т.к. нарушает принцип модульности
# и изолированность функции

cumulative_amount_value = 0

def cumulative_amount(numbers):
    """ Рассчитывает накопленную сумму

    :param numbers: список чисел в строковом представлении

    """
    global cumulative_amount_value
    cumulative_amount_value += sum(list(map(int, numbers)))
    return None


exit_flag = False

while True:
    user_input = input("Введите числа через пробел (для завершения работы введите символ 'X' через пробел): ").upper()
    numbers = user_input.split(' ')
    if numbers.count('X') > 0:
        exit_flag = True
        numbers.remove('X')
    cumulative_amount(numbers)
    print(f"Накопленная сумма = {cumulative_amount_value}")
    if exit_flag:
        break

# 4. Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определите
# параметры, общие для приведённых типов. В классах-наследниках реализуйте параметры,
# уникальные для каждого типа оргтехники.
# 5. Разработайте методы, которые отвечают за приём оргтехники на склад и передачу в определённое подразделение
# компании. Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно
# использовать любую подходящую структуру (например, словарь).
# 6. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров,
# отправленных на склад, нельзя использовать строковый тип данных.
# Подсказка: постарайтесь реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.

# Я разработал решение, состоящие из трёх основных классов
# 1. OfficeEquipment - базовый класс, отвечающий за описание оргтехники. От него наследуются потомки,
#          которые описывают конкретный тип оргтехники. Потомки могут иметь множественное наследование (например МФУ)
#          Подробнее см. модуль OfficeEquipment.py
# 2. WareHouse - класс, отвечающий за операции со складом. Подробнее см. модуль WareHouse.py
# 3. BusinessProcess - класс, отвечающий за организацию взаимодействия пользователя со складом и товарами.
#          Подробнее см. модуль BusinessProcess.py


from BusinessProcess import BusinessProcess

bp = BusinessProcess()
bp.run()
